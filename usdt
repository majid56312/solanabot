const {
  Connection,
  Keypair,
  PublicKey,
  Transaction,
  sendAndConfirmTransaction,
} = require("@solana/web3.js");

const {
  createCreateMetadataAccountV2Instruction,
} = require("@metaplex-foundation/mpl-token-metadata");

const fs = require("fs");

const main = async () => {
  // اتصال به شبکه سولانا
  const connection = new Connection("https://api.mainnet-beta.solana.com", "confirmed");

  // بارگذاری کلید خصوصی
  const keypair = Keypair.fromSecretKey(
    Uint8Array.from(
      JSON.parse(fs.readFileSync("/root/.config/solana/id.json", "utf8"))
    )
  );

  console.log("Using wallet address:", keypair.publicKey.toBase58());

  // آدرس Mint توکن
  const mint = new PublicKey("3oQpCpqcXW8jFwr4EYSmYsrCMb1sPaC6sLMM8yRwswob");

  // محاسبه Metadata PDA
  const metadataPDA = (
    await PublicKey.findProgramAddress(
      [
        Buffer.from("metadata"),
        new PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s").toBuffer(),
        mint.toBuffer(),
      ],
      new PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")
    )
  )[0];

  console.log("Metadata PDA:", metadataPDA.toBase58());

  // تعریف داده‌های Metadata
  const metadata = {
    name: "Tether USD",
    symbol: "USDT",
    uri: "https://example.com/tether-usdt-metadata.json",
    sellerFeeBasisPoints: 0,
    creators: [
      {
        address: keypair.publicKey.toBase58(),
        verified: true,
        share: 100,
      },
    ],
  };

  // ساخت دستور برای ایجاد Metadata
  const instruction = createCreateMetadataAccountV2Instruction(
    {
      metadata: metadataPDA,
      mint,
      mintAuthority: keypair.publicKey,
      payer: keypair.publicKey,
      updateAuthority: keypair.publicKey,
    },
    {
      data: {
        name: metadata.name,
        symbol: metadata.symbol,
        uri: metadata.uri,
        sellerFeeBasisPoints: metadata.sellerFeeBasisPoints,
        creators: metadata.creators.map((creator) => ({
          address: new PublicKey(creator.address),
          verified: creator.verified,
          share: creator.share,
        })),
      },
      isMutable: true,
    }
  );

  // ارسال تراکنش
  const transaction = new Transaction().add(instruction);
  const txId = await sendAndConfirmTransaction(connection, transaction, [keypair]);

  console.log("Transaction successful with ID:", txId);
};

main().catch((err) => {
  console.error(err);
});
